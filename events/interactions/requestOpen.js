const {
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  ButtonBuilder,
  EmbedBuilder,
  ButtonStyle,
  PermissionsBitField,
} = require("discord.js");

const { send } = require("../../Utils/rcon");
const { channelLog, roleId } = require("../../config");
module.exports = {
  name: "interactionCreate",
  code: async (client, interaction) => {
    try {
      if (interaction.isButton()) {
        const [action, data] = interaction.customId.split(":");

        if (action === "request_create") {
          const modal = new ModalBuilder()
            .setCustomId(`requestModalCreate`)
            .setTitle("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É");

          modal.addComponents(
            new ActionRowBuilder().addComponents(
              new TextInputBuilder()
                .setCustomId("request_create_nickname")
                .setLabel("–í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ")
                .setStyle(TextInputStyle.Short)
                .setRequired(true)
                .setMinLength(4)
                .setMaxLength(30)
            ),
            new ActionRowBuilder().addComponents(
              new TextInputBuilder()
                .setCustomId("request_create_description")
                .setLabel("–†–∞—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–æ")
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setMinLength(100)
            ),
            new ActionRowBuilder().addComponents(
              new TextInputBuilder()
                .setCustomId("request_create_age")
                .setLabel("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç")
                .setStyle(TextInputStyle.Short)
                .setRequired(true)
                .setMinLength(2)
                .setMaxLength(2)
            )
          );
          await interaction.showModal(modal);
        } else if (action === "request_accept") {
          const [nick, userId] = data.split("_");
          (async () => {
            await interaction.deferReply({ ephemeral: true });
            try {
              if (
                !interaction.guild.members.me.permissions.has(
                  PermissionsBitField.Flags.ManageRoles
                )
              ) {
                return interaction.editReply({
                  content: "‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π.",
                });
              }
              const response2 = await send(`whitelist add ${nick}`);

              if (response2 === "Player is already whitelisted") {
                return interaction.editReply({
                  content: "–ò–≥—Ä–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω",
                });
              }
              const role = interaction.guild.roles.cache.get(roleId);
              const member = await interaction.guild.members.fetch(userId);
              await member.roles.add(role);
              const user = await client.users.fetch(userId);
              await user.send(
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç–µ–±—è –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞: ip: may.saylay.online"
              );
              await interaction.editReply({
                content: `–£—Å–ø–µ—Ö, –æ—Ç–≤–µ—Ç: ${response2}`,
              });
            } catch (err) {
              client.logger.log(`–û—à–∏–±–∫–∞ ${err}`, "rcon")
              const isServerOff = err.message.includes("ECONNREFUSED");
              const isRconPass = err.message.includes("Authentication failed");
              if (isServerOff) {
                return interaction.editReply({
                  content: "–û—à–∏–±–∫–∞, —Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω",
                });
              }
              if (isRconPass) {
                return interaction.editReply({
                  content: "–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Rcon",
                });
              }
              return interaction.editReply({
                content: "–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±–æ—Ç–∞",
              });
            }
          })();
        }
        if (action === "request_decline") {
          const [nick, userId] = data.split("_");
          const user = await client.users.fetch(userId);
          await user.send("–ö —Å–æ–∂–µ–ª–µ–Ω–∏—è —Ç—ã –Ω–µ –ø—Ä–æ—à–µ–ª –≤ –≤–∞–π—Ç–ª–∏—Å—Ç üòî");
          interaction.reply({ content: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ", ephemeral: true });
        }
      }

      if (interaction.isModalSubmit()) {
        if (interaction.customId === "requestModalCreate") {
          const nickname = interaction.fields.getTextInputValue(
            "request_create_nickname"
          );
       
          const age =
            interaction.fields.getTextInputValue("request_create_age");
          const description = interaction.fields.getTextInputValue(
            "request_create_description"
          );

          if (!channelLog) {
            return interaction.reply({
              content: `–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –≥–¥–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ`,
            });
          }
          const channel = client.channels.cache.get(channelLog);
          if (!channel) {
            return interaction.reply({
              content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
              ephemeral: true,
            });
          }
          const embed = new EmbedBuilder()
            .setTitle("–ó–∞—è–≤–∫–∞ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç")
            .addFields(
              { name: "–ù–∏–∫–Ω–µ–π–º", value: nickname, inline: true },
              { name: "–û–ø–∏—Å–∞–Ω–∏–µ", value: description, inline: true },
              { name: "–í–æ–∑—Ä–∞—Å—Ç", value: age, inline: true }
            )
            .setTimestamp()
            .setColor("#32a852");
          const buttons = new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder({
                custom_id: `request_accept:${nickname}_${interaction.user.id}`,
                label: "–ü—Ä–∏–Ω—è—Ç—å",
                style: ButtonStyle.Success,
                emoji: "‚úÖ",
              })
            )
            .addComponents(
              new ButtonBuilder({
                custom_id: `request_decline:${nickname}_${interaction.user.id}`,
                label: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                style: ButtonStyle.Danger,
                emoji: "‚ùé",
              })
            );
          channel.send({ embeds: [embed], components: [buttons] });
          interaction.reply({
            content: "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ, –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è",
            ephemeral: true,
          });
        }
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤ interactionCreate:", err);
      if (interaction.replied === false && interaction.deferred === false) {
        await interaction.reply({
          content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
          ephemeral: true,
        });
      }
    }
  },
};
